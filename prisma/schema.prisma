// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Card {
  id       String     @id
  name     String
  faces    CardFace[]
  imageUrl String?
  decks    Deck[]
  Change   Change[] // Changes related to this card in the context of branches and commits
}

model CardFace {
  cardId   String
  name     String
  imageUrl String?
  card     Card    @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@id([cardId, name])
}

model User {
  id        String   @id
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  decks     Deck[] // A user can have multiple decks

  @@index([email]) // Index for reduced redundancy. Unique constraint generates an index automatically.
}

model Deck {
  id          String   @id
  name        String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade) // A deck belongs to a user
  cards Card[] // A deck can have multiple cards

  branches Branch[] // A deck can have multiple branches for version control

  @@index([userId])
}

model Branch {
  id           String   @id
  name         String
  deckId       String
  deck         Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade) // A branch belongs to a deck
  commits      Commit[] // A branch can have multiple commits
  headCommitId String // A branch has a head commit for the latest state
}

model Commit {
  id          String
  description String
  createdAt   DateTime @default(now())
  branchId    String
  branch      Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade) // A commit belongs to a branch
  changes     Change[]  // A commit can have multiple changes

  @@id([id, branchId])
}

model Change {
  id             String
  action         String // e.g., "add", "remove", "update"
  commitId       String
  commitBranchId String
  commit         Commit @relation(fields: [commitId, commitBranchId], references: [id, branchId], onDelete: Cascade) // A change belongs to a commit
  cardId         String
  card           Card   @relation(fields: [cardId], references: [id], onDelete: Cascade) // A card is involved in the change

  @@id([id, commitId])
}